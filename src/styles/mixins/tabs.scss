@use "sass:map";
@use "../variables";

%tabs {
  display: flex;
  position: relative;

  &::before {
    content: "";
    position: absolute;
    right: 0;
    bottom: 0;
    left: 0;
    height: variables.$border-width;
    background-color: var(--primary);
  }
}

%tab {
  white-space: nowrap;
  border: variables.$border-width solid transparent;
  font-family: var(--font-family-1);
  font-weight: 500;
  line-height: 2.4rem;
}

@mixin tab-colors {
  &:not(&-active, &-disabled) {
    color: var(--text-primary);

    &:hover {
      color: var(--primary);
    }
  }

  &-active {
    color: var(--on-primary);
    background-color: var(--primary);
    border-color: var(--primary);
  }

  &-disabled {
    color: var(--action-disabled-text);
    background-color: var(--action-disabled-background);
    border-color: var(--action-disabled-background);
    cursor: not-allowed;
  }
}

@mixin tab-sizes() {
  @each $size in sm, md, lg {
    $py: map.get(variables.$button-sizes, $size);
    $px: $py * 2;
    $gap: $py * 0.5;
    $font-size: map.get(variables.$btn-font-sizes, $size);
    $icon-size: map.get(variables.$icon-sizes, $size);
    $radius: map.get(variables.$border-radius, $size);

    &-#{$size} {
      border-top-left-radius: $radius;
      border-top-right-radius: $radius;
      &:not(.tab-icon) {
        padding: calc($py - variables.$border-width) $px;
        font-size: $font-size;

        &.tab-w-start {
          gap: $gap;
          padding-left: calc($px - $gap);
        }

        &.tab-w-end {
          gap: $gap;
          padding-right: calc($px - $gap);
        }
      }

      &.tab-icon {
        padding: calc($py - variables.$border-width + (2.4rem - $icon-size) / 2);
      }
    }
  }
}
