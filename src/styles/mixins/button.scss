@use "sass:map";
@use "../variables";
@use "./shared";

%button {
  @extend %inline-flex-center;

  white-space: nowrap;
  user-select: none;

  border-width: variables.$border-width;
  border-style: solid;

  font-family: var(--font-family-1);
  font-weight: 500;
  line-height: 2.4rem;

  &-label {
    display: inline-flex;
    position: relative;
    z-index: 1;
  }

  &-icon {
    @extend %flex-center;
    pointer-events: none;
  }
}

@mixin button-colors($selector) {
  &.#{$selector}-solid.#{$selector}-inherit:not(.#{$selector}-disabled),
  &.#{$selector}-text.#{$selector}-inherit:not(.#{$selector}-disabled) {
    color: inherit;
    border-color: transparent;

    &:hover {
      background-color: var(--inherit-hover);
    }

    &:active {
      background-color: var(--inherit-pressed);
    }
  }

  &.#{$selector}-outline.#{$selector}-inherit:not(.#{$selector}-disabled) {
    color: inherit;
    border-color: var(--inherit);

    &:hover {
      background-color: var(--inherit-hover);
      border-color: var(--inherit-hover);
    }

    &:active {
      background-color: var(--inherit-pressed);
      border-color: var(--inherit-pressed);
    }
  }

  @each $color in primary, success, error {
    &-#{$color} {
      &.#{$selector}-solid:not(.#{$selector}-disabled) {
        color: var(--on-#{$color});
        background-color: var(--#{$color});
        border-color: var(--#{$color});

        @if ($selector != chip) {
          &:hover {
            background-color: var(--#{$color}-hover);
            border-color: var(--#{$color}-hover);
          }

          &:active {
            background-color: var(--#{$color}-pressed);
            border-color: var(--#{$color}-pressed);
          }
        } @else {
          &.#{$selector}-btn:not(.#{$selector}-disabled) {
            &:hover {
              background-color: var(--#{$color}-hover);
              border-color: var(--#{$color}-hover);
            }

            &:active {
              background-color: var(--#{$color}-pressed);
              border-color: var(--#{$color}-pressed);
            }
          }
        }
      }

      &.#{$selector}-outline:not(.#{$selector}-disabled) {
        color: var(--#{$color});
        border-color: var(--#{$color});

        @if ($selector != chip) {
          &:hover {
            color: var(--on-#{$color});
            background-color: var(--#{$color});
            border-color: var(--#{$color});
          }

          &:active {
            color: var(--on-#{$color});
            background-color: var(--#{$color}-pressed);
            border-color: var(--#{$color}-pressed);
          }
        } @else {
          &.#{$selector}-btn:not(.#{$selector}-disabled) {
            &:hover {
              color: var(--on-#{$color});
              background-color: var(--#{$color});
              border-color: var(--#{$color});
            }

            &:active {
              color: var(--on-#{$color});
              background-color: var(--#{$color}-pressed);
              border-color: var(--#{$color}-pressed);
            }
          }
        }
      }

      &.#{$selector}-text:not(.#{$selector}-disabled) {
        color: var(--#{$color});
        border-color: transparent;

        @if ($selector != chip) {
          &:hover {
            color: var(--#{$color}-hover);
          }

          &:active {
            color: var(--#{$color}-pressed);
          }
        }
      }
    }
  }

  &-disabled {
    &:not(.#{$selector}-text) {
      color: var(--action-disabled-text);
      background-color: var(--action-disabled-background);
      border-color: var(--action-disabled-background);
      cursor: not-allowed;
    }

    &.#{$selector}-text {
      color: var(--action-disabled-text);
      border-color: transparent;
      cursor: not-allowed;
    }
  }
}

@mixin button-sizes() {
  @each $size in sm, md, lg {
    $py: map.get(variables.$button-sizes, $size);
    $px: $py * 2;
    $gap: $py * 0.5;
    $font-size: map.get(variables.$btn-font-sizes, $size);
    $icon-size: map.get(variables.$icon-sizes, $size);
    $radius: map.get(variables.$border-radius, $size);

    &-#{$size} {
      border-radius: $radius;

      &:not(.btn-icon) {
        padding: calc($py - variables.$border-width) $px;
        font-size: $font-size;

        &.btn-w-start {
          gap: $gap;
          padding-left: calc($px - $gap);
        }

        &.btn-w-end {
          gap: $gap;
          padding-right: calc($px - $gap);
        }
      }

      &.btn-icon {
        padding: calc($py - variables.$border-width + (2.4rem - $icon-size) / 2);
      }
    }
  }
}
